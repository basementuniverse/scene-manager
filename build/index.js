(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(self, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Scene = exports.SceneTransitionState = void 0;
var SceneTransitionState;
(function (SceneTransitionState) {
    SceneTransitionState[SceneTransitionState["In"] = 0] = "In";
    SceneTransitionState[SceneTransitionState["Out"] = 1] = "Out";
    SceneTransitionState[SceneTransitionState["None"] = 2] = "None";
})(SceneTransitionState = exports.SceneTransitionState || (exports.SceneTransitionState = {}));
function clamp(a, min = 0, max = 1) {
    return a < min ? min : (a > max ? max : a);
}
class SceneManager {
    constructor() {
        this.scenes = [];
    }
    /**
     * Initialise the scene manager for managing game scenes
     */
    static initialise() {
        if (SceneManager.instance) {
            throw new Error('SceneManager already initialised');
        }
        SceneManager.instance = new SceneManager();
    }
    static getInstance() {
        if (!SceneManager.instance) {
            throw new Error('SceneManager not properly initialised');
        }
        return SceneManager.instance;
    }
    /**
     * Push a scene onto the scene stack and start transitioning in
     */
    static push(scene, ...args) {
        const instance = SceneManager.getInstance();
        instance.scenes.push(scene);
        // Initialise the scene and start the transition
        scene.initialise(...args);
        scene.transitionIn();
        return scene;
    }
    /**
     * Remove a scene from the scene stack after transitioning out
     */
    static pop() {
        const instance = SceneManager.getInstance();
        if (instance.scenes.length > 0) {
            let last = instance.scenes.length - 1;
            // Remove the top-most scene that isn't currently transitioning out
            while (last > 0 &&
                instance.scenes[last].transitionState === SceneTransitionState.Out) {
                last--;
            }
            if (last >= 0) {
                const scene = instance.scenes[last];
                // Start transitioning out
                scene.transitionOut();
                return scene;
            }
        }
        return undefined;
    }
    /**
     * Remove all scene from the scene stack
     */
    static clear() {
        const instance = SceneManager.getInstance();
        instance.scenes.forEach(scene => {
            if (scene.transitionState !== SceneTransitionState.Out) {
                scene.transitionOut();
            }
        });
    }
    /**
     * Update the scene manager and the current scene
     */
    static update(dt, ...args) {
        const instance = SceneManager.getInstance();
        if (instance.scenes.length > 0) {
            // Only update the top-most scene that isn't currently transitioning out
            for (let i = instance.scenes.length; i--;) {
                if (instance.scenes[i].transitionState !== SceneTransitionState.Out) {
                    instance.scenes[i].update(dt, ...args);
                    break;
                }
            }
            // Update all scene transitions
            instance.scenes.forEach(scene => {
                scene.updateTransition(dt);
            });
            // Remove any disposed scenes
            instance.scenes = instance.scenes.filter(scene => !scene.disposed);
        }
    }
    /**
     * Render scenes on the screen
     */
    static draw(context, ...args) {
        const instance = SceneManager.getInstance();
        // Figure out which scenes we need to draw
        const drawList = [];
        for (let i = instance.scenes.length; i--;) {
            const scene = instance.scenes[i];
            drawList.push(scene);
            // If transitioning, this scene is assumed to be transparent
            // (we might want to show the scene underneath if we're doing e.g. a fade)
            if (!scene.transparent &&
                scene.transitionState === SceneTransitionState.None) {
                break;
            }
        }
        // Draw the scenes in bottom -> top order
        drawList.reverse().forEach(scene => {
            scene.draw(context, ...args);
        });
    }
    /**
     * Let all scenes know that a resize event has occurred
     */
    static resize(width, height) {
        var _a;
        const instance = SceneManager.getInstance();
        for (const scene of instance.scenes) {
            (_a = scene.resize) === null || _a === void 0 ? void 0 : _a.call(scene, width, height);
        }
    }
}
exports["default"] = SceneManager;
class Scene {
    constructor(options) {
        this.defaultOptions = {
            transitionTime: 2,
            transparent: true,
        };
        this.transitionState = SceneTransitionState.None;
        this.transitionAmount = 0;
        this.transitionTime = 0;
        this.transparent = false;
        this.disposed = false;
        const actualOptions = Object.assign({}, this.defaultOptions, options);
        this.transitionTime = actualOptions.transitionTime;
        this.transparent = actualOptions.transparent;
    }
    dispose() {
        this.disposed = true;
    }
    transitionIn() {
        this.transitionState = SceneTransitionState.In;
    }
    transitionOut() {
        this.transitionState = SceneTransitionState.Out;
    }
    updateTransition(dt) {
        const amount = dt / this.transitionTime;
        // Transitioning in
        if (this.transitionState === SceneTransitionState.In) {
            if (this.transitionAmount < 1) {
                this.transitionAmount = clamp(this.transitionAmount + amount);
            }
            else {
                this.transitionState = SceneTransitionState.None;
            }
        }
        // Transitioning out
        if (this.transitionState === SceneTransitionState.Out) {
            if (this.transitionAmount > 0) {
                this.transitionAmount = clamp(this.transitionAmount - amount);
            }
            else {
                this.dispose();
            }
        }
    }
}
exports.Scene = Scene;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFZQSxJQUFZLG9CQUlYO0FBSkQsV0FBWSxvQkFBb0I7SUFDOUIsMkRBQUUsQ0FBQTtJQUNGLDZEQUFHLENBQUE7SUFDSCwrREFBSSxDQUFBO0FBQ04sQ0FBQyxFQUpXLG9CQUFvQixHQUFwQiw0QkFBb0IsS0FBcEIsNEJBQW9CLFFBSS9CO0FBRUQsU0FBUyxLQUFLLENBQUMsQ0FBUyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUM7SUFDeEMsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBcUIsWUFBWTtJQUsvQjtRQUZRLFdBQU0sR0FBWSxFQUFFLENBQUM7SUFFTixDQUFDO0lBRXhCOztPQUVHO0lBQ0ksTUFBTSxDQUFDLFVBQVU7UUFDdEIsSUFBSSxZQUFZLENBQUMsUUFBUSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztTQUNyRDtRQUNELFlBQVksQ0FBQyxRQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0lBRU8sTUFBTSxDQUFDLFdBQVc7UUFDeEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsT0FBTyxZQUFZLENBQUMsUUFBUSxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBWSxFQUFFLEdBQUcsSUFBVztRQUM3QyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFNUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFNUIsZ0RBQWdEO1FBQ2hELEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUMxQixLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDckIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsR0FBRztRQUNmLE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUU1QyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM5QixJQUFJLElBQUksR0FBVyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFFOUMsbUVBQW1FO1lBQ25FLE9BQ0UsSUFBSSxHQUFHLENBQUM7Z0JBQ1IsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxlQUFlLEtBQUssb0JBQW9CLENBQUMsR0FBRyxFQUNsRTtnQkFDQSxJQUFJLEVBQUUsQ0FBQzthQUNSO1lBQ0QsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO2dCQUNiLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBRXBDLDBCQUEwQjtnQkFDMUIsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO2dCQUN0QixPQUFPLEtBQUssQ0FBQzthQUNkO1NBQ0Y7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsS0FBSztRQUNqQixNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFNUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDOUIsSUFBSSxLQUFLLENBQUMsZUFBZSxLQUFLLG9CQUFvQixDQUFDLEdBQUcsRUFBRTtnQkFDdEQsS0FBSyxDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3ZCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQVUsRUFBRSxHQUFHLElBQVc7UUFDN0MsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTVDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzlCLHdFQUF3RTtZQUN4RSxLQUFLLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHO2dCQUN6QyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxLQUFLLG9CQUFvQixDQUFDLEdBQUcsRUFBRTtvQkFDbkUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7b0JBQ3ZDLE1BQU07aUJBQ1A7YUFDRjtZQUVELCtCQUErQjtZQUMvQixRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDOUIsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzdCLENBQUMsQ0FBQyxDQUFDO1lBRUgsNkJBQTZCO1lBQzdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNwRTtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBaUMsRUFBRSxHQUFHLElBQVc7UUFDbEUsTUFBTSxRQUFRLEdBQUcsWUFBWSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTVDLDBDQUEwQztRQUMxQyxNQUFNLFFBQVEsR0FBWSxFQUFFLENBQUM7UUFDN0IsS0FBSyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsR0FBRztZQUN6QyxNQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFFckIsNERBQTREO1lBQzVELDBFQUEwRTtZQUMxRSxJQUNFLENBQUMsS0FBSyxDQUFDLFdBQVc7Z0JBQ2xCLEtBQUssQ0FBQyxlQUFlLEtBQUssb0JBQW9CLENBQUMsSUFBSSxFQUNuRDtnQkFDQSxNQUFNO2FBQ1A7U0FDRjtRQUVELHlDQUF5QztRQUN6QyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2pDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQWEsRUFBRSxNQUFjOztRQUNoRCxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFNUMsS0FBSyxNQUFNLEtBQUssSUFBSSxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQ25DLE1BQUEsS0FBSyxDQUFDLE1BQU0sc0RBQUcsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztDQUNGO0FBL0lELCtCQStJQztBQUVELE1BQXNCLEtBQUs7SUFnQnpCLFlBQW1CLE9BQStCO1FBZmpDLG1CQUFjLEdBQWlCO1lBQzlDLGNBQWMsRUFBRSxDQUFDO1lBQ2pCLFdBQVcsRUFBRSxJQUFJO1NBQ2xCLENBQUM7UUFFSyxvQkFBZSxHQUF5QixvQkFBb0IsQ0FBQyxJQUFJLENBQUM7UUFFbEUscUJBQWdCLEdBQVcsQ0FBQyxDQUFDO1FBRTdCLG1CQUFjLEdBQVcsQ0FBQyxDQUFDO1FBRTNCLGdCQUFXLEdBQVksS0FBSyxDQUFDO1FBRTdCLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFHL0IsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN0RSxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQyxjQUFjLENBQUM7UUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUMsV0FBVyxDQUFDO0lBQy9DLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7SUFDdkIsQ0FBQztJQUVNLFlBQVk7UUFDakIsSUFBSSxDQUFDLGVBQWUsR0FBRyxvQkFBb0IsQ0FBQyxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVNLGFBQWE7UUFDbEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxvQkFBb0IsQ0FBQyxHQUFHLENBQUM7SUFDbEQsQ0FBQztJQUVNLGdCQUFnQixDQUFDLEVBQVU7UUFDaEMsTUFBTSxNQUFNLEdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUM7UUFFaEQsbUJBQW1CO1FBQ25CLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxvQkFBb0IsQ0FBQyxFQUFFLEVBQUU7WUFDcEQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsQ0FBQzthQUMvRDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsZUFBZSxHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQzthQUNsRDtTQUNGO1FBRUQsb0JBQW9CO1FBQ3BCLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxvQkFBb0IsQ0FBQyxHQUFHLEVBQUU7WUFDckQsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsQ0FBQzthQUMvRDtpQkFBTTtnQkFDTCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDaEI7U0FDRjtJQUNILENBQUM7Q0FTRjtBQS9ERCxzQkErREMifQ==

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./index.ts"](0, __webpack_exports__);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,